import React from 'react';
import PropTypes from 'prop-types';
import Button from '@material-ui/core/Button';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import Typography from '@material-ui/core/Typography';
import ListItemText from '@material-ui/core/ListItemText';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import DialogTitle from '@material-ui/core/DialogTitle';
import Slide from '@material-ui/core/Slide';
import LabelIcon from '@material-ui/icons/Label';

function Transition(props) {
  return <Slide direction="up" {...props} />;
}

function renderSummary(cve, labels) {
  if (labels.length === 0){
    return (
      <Typography align="center">
        The document doesn't have any semantic label associated
      </Typography>)
  }
  return labels.map(label => (
    <ListItem divider>
      <ListItemIcon><LabelIcon /></ListItemIcon>
      <ListItemText>{`${cve.substring(label.start, label.end)} -----> ${label.label}`}</ListItemText>
    </ListItem>
  ))
}

class SummaryDialogComponent extends React.Component {

  render() {
    const { open, handleOk, handleCancel, cve, labels} = this.props;
    return (
        <Dialog
          open={open}
          fullWidth
          TransitionComponent={Transition}
          keepMounted
          aria-labelledby="alert-dialog-slide-title"
        >
          <DialogTitle id="alert-dialog-slide-title">
            {"Summary"}
          </DialogTitle>
          <DialogContent>
            <List >
              {renderSummary(cve, labels)}
            </List>
          </DialogContent>
          <DialogActions>
            <Button onClick={handleCancel} color="secondary">
              Cancel
            </Button>
            <Button onClick={handleOk} color="secondary">
              Submit
            </Button>
          </DialogActions>
        </Dialog>
    );
  }
}

SummaryDialogComponent.propTypes = {
  open: PropTypes.bool.isRequired,
  handleOk: PropTypes.func.isRequired,
  handleCancel: PropTypes.func.isRequired,
  cve: PropTypes.string.isRequired,
  labels: PropTypes.array.isRequired
};

export default SummaryDialogComponent;
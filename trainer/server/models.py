from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, Text, UnicodeText
from sqlalchemy.orm import relationships, relationship


Base = declarative_base()


class CveToLabel(Base):

    __tablename__ = 'CVE_TO_LABEL'

    cve_id = Column('cve_id', UnicodeText, primary_key=True, nullable=False)
    cve_description = Column('cve_description', UnicodeText, nullable=False)

    def __init__(self, cve_id, cve_description):
        self.cve_id = cve_id
        self.cve_description = cve_description

    def to_dict(self):
        return { "cve_id": self.cve_id, "cve_description": self.cve_description }


class CveWithLabels(Base):

    __tablename__ = 'CVE_WITH_LABELS'

    cve_id = Column('cve_id', UnicodeText, primary_key=True)

    def __init__(self, cve_id):
        self.cve_id = cve_id

    # def __repr__(self):
    #     return "CveWithLabels [cve_id]: " + self.cve_id + "\n"


class Labels(Base):

    __tablename__ = 'LABELS'

    id = Column('id', Integer, primary_key=True)
    cve_id = Column('cve_id', UnicodeText, ForeignKey('CVE_WITH_LABELS.cve_id'), nullable=False)
    label = Column('label', UnicodeText, nullable=False)
    start_idx = Column('start_idx', Integer, nullable=False)
    end_idx = Column('end_idx', Integer, nullable=False)

    def __init__(self, cve_id, label, start_idx, end_idx):
        self.cve_id = cve_id
        self.label = label
        self.start_idx = start_idx
        self.end_idx = end_idx

    # def __repr__(self):
    #     labels = ""
    #     labels += "Labels [cve_id]: " + self.cve_id + "\n"
    #     labels += "Labels [label]: " + self.label + "\n"
    #     labels += "Labels [start_idx]: " + self.start_idx+ "\n"
    #     labels += "Labels [end_idx]: " + self.end_idx + "\n"
    #     return labels
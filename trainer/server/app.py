import os
import json
from flask import Flask, jsonify, request, abort
from flask_cors import CORS
from sqlalchemy import create_engine, or_
from sqlalchemy.orm import sessionmaker
from sqlalchemy.orm.exc import NoResultFound
from sqlalchemy.orm.exc import MultipleResultsFound

from models import CveToLabel, CveWithLabels, Labels

app = Flask(__name__)
CORS(app)

# DATABASE CONFIGURATION
# DATABASE_USERNAME = os.environ.get('TRAINER_ADMIN_USER', '')
# DATABASE_PASSWORD = os.environ.get('TRAINER_ADMIN_PASSWORD', '')
DATABASE_URL = '127.0.0.1'
DATABASE_NAME = 'trainer.sqlite'

engine = create_engine('sqlite:///' + DATABASE_NAME, echo=False,  isolation_level="READ UNCOMMITTED")

Session = sessionmaker(bind=engine)

db_session = Session() 

@app.route("/getNextCve")
def get_next_cve():
  try:
    next_cve_to_label = db_session.query(CveToLabel).first()
    return jsonify(success=True, data=next_cve_to_label.to_dict())
  except MultipleResultsFound: 
    return jsonify(success=False, error="ERR: Multiple results returned!")
  except NoResultFound: 
    return jsonify(success=False, error="ERR: No result found!")


@app.route("/submitLabeledCve", methods=['POST']) 
def submit_labeled_cve():
  data = request.get_json()
  cve_id = data.get('cve_id', None)
  labels = data.get('labels', None)
  import ipdb; ipdb.set_trace()
  
  if cve_id is None:
    return jsonify(success=False, error="ERR: cve_id field must exists!") 
  if labels is None:
    return jsonify(success=False, error="ERR: labels field must exists!") 

  for label in labels:
    db_session.add(Labels(cve_id, label['label'], label['start_idx'], label['end_idx']))

  db_session.commit()
  return jsonify(success=True)

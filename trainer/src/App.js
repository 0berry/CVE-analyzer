import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { BrowserRouter as Router, Route, Link } from 'react-router-dom';
import { connect } from 'react-redux';
import { withStyles } from '@material-ui/core/styles/index';
import Drawer from '@material-ui/core/Drawer';
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Tooltip from '@material-ui/core/Tooltip';
import List from '@material-ui/core/List';
import Typography from '@material-ui/core/Typography';
import Divider from '@material-ui/core/Divider';
import IconButton from '@material-ui/core/IconButton';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import HomeIcon from '@material-ui/icons/Home';
import Home from './components/home/index'
import withRoot from './styles/withRoot';


const drawerWidth = 240;

const styles = theme => ({
  root: {
    flexGrow: 1,
    zIndex: 1,
    overflow: 'hidden',
    position: 'relative',
    display: 'flex',
  },
  appBar: {
    zIndex: theme.zIndex.drawer + 1,
  },
  flex: {
    flex: 1,
  },
  drawerPaper: {
    height: '100%',
    minHeight: '100vh',
    position: 'relative',
    whiteSpace: 'nowrap',
    width: drawerWidth,
  },
  drawerPaperClose: {
    overflowX: 'hidden',
    width: theme.spacing.unit * 7,
    [theme.breakpoints.up('sm')]: {
      width: theme.spacing.unit * 9,
    },
  },
  toolbar: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-end',
    padding: '0 8px',
    ...theme.mixins.toolbar,
  },
});

const mapDispatchToProps = dispatch => ({
});

class AppComponent extends React.Component {

  render() {
    const { classes } = this.props;

    return (
      <Router>
        <div className={classes.root}>
          <AppBar
            position="absolute"
            className={classNames(classes.appBar)}
          >
            <Toolbar>
              <Typography variant="title" color="inherit" noWrap className={classes.flex}>
                Trainer
              </Typography>
            </Toolbar>
          </AppBar>
          <Drawer
            variant="permanent"
            classes={{
              paper: classNames(classes.drawerPaper, classes.drawerPaperClose),
            }}
          >
            <div className={classes.toolbar}>
              <IconButton />
            </div>
            <Divider />
            <List>
              <Tooltip title="Home" placement="right">
                <Link to="/">
                  <ListItem button>
                    <ListItemIcon style={{ 'marginLeft': '0.5em' }}>
                      <HomeIcon />
                    </ListItemIcon>
                  </ListItem>
                </Link>
              </Tooltip>
            </List>
          </Drawer>
          <Route exact path="/" component={Home} />
        </div>
      </Router>
    );
  }
}

AppComponent.propTypes = {
  classes: PropTypes.object.isRequired,
  theme: PropTypes.object.isRequired,
};

const App = connect(null, mapDispatchToProps)(AppComponent);

export default withRoot(withStyles(styles, { withTheme: true })(App));

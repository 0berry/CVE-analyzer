import React from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import { withStyles } from '@material-ui/core/styles';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import Typography from '@material-ui/core/Typography';
import Grid from '@material-ui/core/Grid';
import Paper from '@material-ui/core/Paper';
import withRoot from "../../styles/withRoot";
import SubSectionHeader from '../shared/subSectionHeader';
import LabelSelection from './labelSelection';
import LabelAssigned from './labelAssigned';

const styles = theme => ({
  card: {
    minWidth: 275,
    border: `2px solid ${theme.palette.primary["300"]}`,
    borderRadius: '5px',
    backgroundColor: `${theme.palette.background.default}`,
    marginBottom: 20
  },
  cardContent: {
    paddingTop: '24px'
  },
  title: {
    fontSize: 18,
  },
});

const mapStateToProps = state => ({
  currentAnalyzedCveProp: state.tagger.currentAnalyzedCve,
  availableLabelsProp: state.tagger.availableLabels,
  currentAssignedLabelsProp: state.tagger.currentAssignedLabels
});

function renderCVEWithLabels(cve, labels) {
  let sortedAssignedLabels = labels.sort((label1, label2) => (label1.start < label2.start ? -1 : label1.start > label2.start ? 1 : 0 ));
  let lastLabel = {start: 0, end: 0};
  let labeledCve = [];
  for (let i=0; i < sortedAssignedLabels.length; i++) {
    let label = sortedAssignedLabels[i];
    labeledCve.push(cve.substring(lastLabel.end, label.start));
    labeledCve.push(<LabelAssigned labelText={cve.substring(label.start, label.end)} labelColor={label.color} labelStartIdx={label.start}/>);
    lastLabel = label;
  }
  labeledCve.push(cve.substring(lastLabel.end));
  return labeledCve;
}

function CVERendererComponent(props) {
  const { classes, currentAnalyzedCveProp, availableLabelsProp, currentAssignedLabelsProp } = props;

  return (
    <div>
      <SubSectionHeader title="CVE Description" />
      <Card className={classes.card}>
        <CardContent className={classes.cardContent}>
          <Typography className={classes.title} color="textSecondary" id={"cveRenderer"}>
            {renderCVEWithLabels(currentAnalyzedCveProp, currentAssignedLabelsProp)}
          </Typography>
        </CardContent>
      </Card>
      <SubSectionHeader title="Labels" />
      <Grid container spacing={24}>
      {availableLabelsProp.map(data => {
        return (
          <Grid item xs={12} key={data.key} >
            <Paper className={classes.chipPaper}>
              <LabelSelection labelColor={data.color} labelText={data.label} />
            <Typography variant="body2" inline gutterBottom>
              : {data.description}
            </Typography>
            </Paper>
          </Grid>
        );
      })}
      </Grid>
    </div>
  );
}

CVERendererComponent.propTypes = {
  classes: PropTypes.object.isRequired,
  currentAnalyzedCveProp: PropTypes.string.isRequired,
  availableLabelsProp: PropTypes.array.isRequired,
  currentAssignedLabelsProp: PropTypes.array.isRequired
};

const CVERenderer = connect(mapStateToProps)(CVERendererComponent);
export default withRoot(withStyles(styles, { withTheme: true })(CVERenderer));

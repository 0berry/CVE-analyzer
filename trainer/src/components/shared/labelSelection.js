import React from 'react';
import PropTypes from 'prop-types';
import connect from 'react-redux/es/connect/connect';
import { withStyles } from '@material-ui/core/styles';
import Chip from '@material-ui/core/Chip';
import FiberRecordIcon from '@material-ui/icons/FiberManualRecord'
import { addAssignedLabel } from "../actions/taggerActions";

const styles = theme => ({
  root: {
    display: 'flex',
    justifyContent: 'center',
    flexWrap: 'wrap',
  },
  chip: {
    margin: theme.spacing.unit,
    borderTopRightRadius: 3,
    borderBottomRightRadius: 3,
    fontSize: 15,
  },
  chipIcon: {
    fontSize: 15,
    color: `${theme.palette.background.paper}`
  },
  chipPaper: {
    padding: 10
  }
});

const mapDispatchToProps = dispatch => ({
  addAssignedLabelFun: label => dispatch(addAssignedLabel(label)),
});

function rebaseRangeToParent(selectObject){
  const range = selectObject.getRangeAt(0);
  const selectedLength = range.toString().length;
  const preCaretRange = range.cloneRange();
  preCaretRange.selectNodeContents(selectObject.anchorNode.parentNode);
  preCaretRange.setEnd(range.endContainer, range.endOffset);
  return { start: preCaretRange.toString().length - selectedLength, end: preCaretRange.toString().length }
}

function rebaseRangeAfterTrim(range, selectedText) {
  const selectedTextLtrimmed = selectedText.trimStart()
  const selectedTextRtrimmed = selectedText.trimEnd()
  if(selectedTextLtrimmed !== selectedText) {
    range.start = range.start + (selectedText.length - selectedTextLtrimmed.length)
  }
  if(selectedTextRtrimmed !== selectedText) {
    range.end = range.end - (selectedText.length - selectedTextRtrimmed.length)
  }
  return range
}

function handleClick(label, labelColor, func) {
  const selectedObject = window.getSelection();
  if(selectedObject.focusNode === null){
    return;
  }
  if(selectedObject.anchorNode.parentElement.id !== "cveRenderer"){
    return;
  }
  const rebaseRange = rebaseRangeAfterTrim(rebaseRangeToParent(selectedObject), selectedObject.toString())

  return func({
    label: label, color: labelColor, start: rebaseRange.start, end: rebaseRange.end
  })
}

function LabelSelectionComponent(props) {
  const { classes, labelText, labelColor, addAssignedLabelFun } = props;
  return (
      <Chip
        icon={<FiberRecordIcon className={classes.chipIcon}/>}
        label={labelText}
        className={classes.chip}
        style={{ backgroundColor: labelColor }}
        onClick={() => handleClick(labelText, labelColor, addAssignedLabelFun)}
      />
  );
}

LabelSelectionComponent.propTypes = {
  classes: PropTypes.object.isRequired,
  labelText: PropTypes.string.isRequired,
  labelColor: PropTypes.string.isRequired,
  addAssignedLabelFun: PropTypes.func.isRequired
};

const LabelSelection = connect(null, mapDispatchToProps)(LabelSelectionComponent);
export default withStyles(styles)(LabelSelection);
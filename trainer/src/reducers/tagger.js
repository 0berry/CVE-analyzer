import {
  DELETE_ASSIGNED_LABEL,
  ADD_ASSIGNED_LABEL
} from '../constants/actionTypes';

// Set here the initial state of the dashboard
const initialState = {
  // TODO: The available lables are her ebecause we plan to support insertion of new labels server side.
  availableLabels: [
    { key: 0, label: 'Struct', color: '#d50000', description: 'Malformed struct that contains the bug' },
    { key: 1, label: 'Driver' , color: '#AA00FF', description: 'Driver that we the attacker needs to interact with to trigger the exploit'  },
    { key: 2, label: 'Version', color: '#304FFE', description: 'Vulnerable version of the target program'   },
    { key: 3, label: 'Function', color: '#00BFA5', description: 'Vulnerable function name'  },
    { key: 4, label: 'Capability', color: '#64DD17', description: 'Capability that the attacker gains after a successful exploitation of the vulnerability (e.g. denial of service, etc...)'  },
    { key: 5, label: 'Vulnerability', color: '#FFAB00', description: 'Type of the vulnerability (e.g. buffer overflow, etc...)'  },
    { key: 6, label: 'Source Code', color: '#FF6D00', description: 'Path to the source code that contains the vulnerable function/functions'  },
  ],
  currentAnalyzedCve: 'A remote code execution vulnerability exists when the Windows Jet Database Engine improperly handles objects in memory, aka "Jet Database Engine Remote Code Execution Vulnerability." This affects Windows 7, Windows Server 2012 R2, Windows RT 8.1, Windows Server 2008, Windows Server 2019, Windows Server 2012, Windows 8.1, Windows Server 2016, Windows Server 2008 R2, Windows 10, Windows 10 Servers. This CVE ID is unique from CVE-2019-0538, CVE-2019-0575, CVE-2019-0576, CVE-2019-0577, CVE-2019-0578, CVE-2019-0579, CVE-2019-0580, CVE-2019-0581, CVE-2019-0582, CVE-2019-0583.',
  currentAssignedLabels: [
  ]
};

// Main reducer for the dashboard
// All the states updates relative to the dashboard must be performed here
export default function TaggerReducer(state = initialState, action) {
  switch (action.type) {
    case DELETE_ASSIGNED_LABEL:
      const updatedAssignLabels = state.currentAssignedLabels.filter(label => label.start !== action.payload);
      return { ...state, currentAssignedLabels: updatedAssignLabels };
    case ADD_ASSIGNED_LABEL:
      return { ...state, currentAssignedLabels: [action.payload, ...state.currentAssignedLabels ]};
    default:
      return state;
  }
}